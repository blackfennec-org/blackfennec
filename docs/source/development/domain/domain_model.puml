@startuml domain model

hide circle
hide members
hide methods

skinparam class {
    BackgroundColor #EEE
    ArrowColor Black
    BorderColor Black
}

title Domain Model

package "Black Fennec" <<Frame>> {

    package "Structure" as ps <<Frame>> {
        class "Structure"               as s
        class "Map"                     as m
        class "List"                    as l
        class "String"                  as str
        class "Number"                  as n
        class "Boolean"                 as b
        class "Null"                    as nu
        class "Reference"                as r

        m -u-|> s
        l -u-|> s
        str -u-|> s
        n -u-|> s
        b -u-|> s
        nu -u-|> s
        r -u-|> s

        m ---> s : contains
        l ---> s : contains
    }

    package "Layers" <<Frame>> {
        class "Layer"                   as la
        class "Merged Layer"            as ml
        class "Overlay"                 as ol
        class "Observable Layer"        as rl

        la -u-|> ps
        ml -u-|> la
        ol -u-|> la
        rl -u-|> la
    }

    package "Type System" as pts <<Frame>> {
        class "Interpretation Service"  as is 
        class "Interpretation"          as i
        class "Type Registry"           as typer
        class "Type Parser"             as tp

        package "Type" <<Frame>> {
            class "Type"                as t
            class "Map Type"            as mapt
            class "List Type"           as lt
            class "String Type"         as st
            class "Number Type"         as nt
            class "Boolean Type"        as bt
            class "Null Type"           as nut
            class "Reference Type"      as reft

            mapt -u-|> t
            lt -u-|> t
            st -u-|> t
            nt -u-|> t
            bt -u-|> t
            nut -u-|> t
            reft -u-|> t

        }

        typer ---> t : contains
        is ---> typer : uses
        tp ---> t : creates
        tp ---> s : parses
    }

    package "Document System" as pds <<Frame>> {
        class "Document Factory"        as df
        class "Document Registry"       as dr
        class "Document"                as d
        class "Mime Type"               as mt
        class "Mime Type Registry"      as mtr

        class "Resource Type"           as rt
        class "Resource Type Registry"  as rtr

        mtr ---> mt : contains
        rtr ---> rt : contains
        df  ---> d : creates
        dr  ---> d : contains
        d ---> mt : has a
        d ---> rt : has a
        df  ---> mtr : uses
        df  ---> rtr : uses
    }

    package "Presentation System" as pps <<Frame>> {
        class "Presenter"                   as p
        class "Presenter Registry"          as pr
        class "Type View"                   as tv
        class "Type View Factory Registry"  as tvfr
        class "Type View Factory"           as tvf
        class "Structure View Factory"      as svf
        class "Navigation Service"          as ns
        class "History Service"             as hs
        class "UI Service"                  as uis

        tvfr ---> tvf : contains
        tvf ---> tv : creates
        pr ---> p : contains
        p -> tv : presents
        p ---> ns : listens to
        p -> svf: uses
        svf -> tvf: uses
        svf -> tvfr: uses

    }

    package "Action System" <<Frame>> {
        class "Action"                  as a
        class "Action Registry"         as ar

        ar ---> a : contains
    }

    package "Extension System" <<Frame>> {
        class "Extension" as e
        class "Extension Registry" as er
        class "Extension API" as api
        class "Extension Service" as es

        e ----> e : depends on
        e --> api : has access to
        es --> e : loads
        er --> e : contains

        api ---> is
        api ---> pr
        api ---> ar
        api ---> tvfr
        api ---> mtr
        api ---> rtr
        api ---> dr
        api ---> typer
        api ---> tp
        api ---> uis
    }
}


' relations

d ---> s : contains

is ---> s : interprets
is ---> i : provides
i ---> t : is a collection of

tv ---> t : represents
tv ---> s : acts on

a ---> s : acts on
a ---> t : depends on


' arrangement

pts -[hidden]down- ps
pds -[hidden]down- ps
pps -[hidden]down- ps

@enduml
