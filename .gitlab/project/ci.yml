variables:
  PROJECT_BUILD_IMAGE: $CI_REGISTRY_IMAGE/project-build:latest
  GIT_DEPTH: 0

###############################################################################
# Build Project Building Docker Image
###############################################################################
build_image:
  stage: prebuild
  image: docker:latest
  script:
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
    - docker build --tag $PROJECT_BUILD_IMAGE -f  .gitlab/project/Dockerfile.build .
    - docker push $PROJECT_BUILD_IMAGE
  only:
    changes:
      - .gitlab/project/Dockerfile.build
      - .gitlab/project/.dockerignore
      - .gitlab/project/ci.yml

###############################################################################
# Test Black-Fennec
###############################################################################

run tests:
  image: $PROJECT_BUILD_IMAGE
  stage: test
  before_script:
    - pip install -r requirements.txt
    - make init
  script:
    - pytest --cov-config=.coveragerc --cov=. tests/
    - coverage xml
  artifacts:
    reports:
      cobertura: coverage.xml
  coverage: /^TOTAL.+?(\d+\%)$/

###############################################################################
# Publish Python Package
###############################################################################

run publish-package:
  image: $PROJECT_BUILD_IMAGE
  stage: deploy
  only:
    - tags
  before_script:
    - pip install -r requirements.txt
  script:
    - pip install twine
    - python setup.py sdist
    - TWINE_PASSWORD=${CI_JOB_TOKEN} TWINE_USERNAME=gitlab-ci-token python -m twine upload --repository-url https://gitlab.ost.ch/api/v4/projects/${CI_PROJECT_ID}/packages/pypi dist/*
