variables:
  PROJECT_BUILD_IMAGE: $CI_REGISTRY_IMAGE/project-build:latest
  GIT_DEPTH: 0

###############################################################################
# Build Project Building Docker Image
###############################################################################
build project image:
  stage: prebuild
  image: docker:latest
  script:
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
    - docker build --tag $PROJECT_BUILD_IMAGE -f  .gitlab/project/Dockerfile.build .
    - docker push $PROJECT_BUILD_IMAGE
  only:
    changes:
      - .gitlab/project/Dockerfile.build
      - .gitlab/project/.dockerignore
      - .gitlab/project/ci.yml

###############################################################################
# Test Black-Fennec
###############################################################################
run linter:
  image: $PROJECT_BUILD_IMAGE
  stage: test
  before_script:
    - pip install -r requirements.txt
    - pip install pylint-exit anybadge
  script:
    - mkdir ./pylint
    - find . -name "*.py" | awk '{printf "%s ",$0}' | xargs -I {} sh -c "pylint --output-format=text {} | tee ./pylint/pylint.log || pylint-exit $?"
    - PYLINT_SCORE=$(sed -n 's/^Your code has been rated at \([-0-9.]*\)\/.*/\1/p' ./pylint/pylint.log)
    - anybadge --label=Pylint --file=pylint/pylint.svg --value=$PYLINT_SCORE 2=red 4=orange 8=yellow 10=green
    - echo "Pylint score is $PYLINT_SCORE"
  artifacts:
    paths:
      - ./pylint/

run tests:
  image: $PROJECT_BUILD_IMAGE
  stage: test
  before_script:
    - pip install -r requirements.txt
    - alias pytest="xvfb-run -a pytest"
  script:
    - pytest --cov-config=.coveragerc --cov=. tests/
    - coverage xml
  artifacts:
    reports:
      cobertura: coverage.xml
  coverage: /^TOTAL.+?(\d+\%)$/

###############################################################################
# Publish Python Package
###############################################################################

publish package:
  image: $PROJECT_BUILD_IMAGE
  stage: deploy
  only:
    - tags
  before_script:
    - pip install -r requirements.txt
  script:
    - pip install twine
    - python setup.py sdist
    - TWINE_PASSWORD=${CI_JOB_TOKEN} TWINE_USERNAME=gitlab-ci-token python -m twine upload --repository-url https://gitlab.ost.ch/api/v4/projects/${CI_PROJECT_ID}/packages/pypi dist/*
