variables:
    BUILD_IMAGE: $CI_REGISTRY_IMAGE/sphinx-build:$CI_COMMIT_REF_SLUG
    GIT_DEPTH: 0

image: $BUILD_IMAGE

services:
  - docker:stable-dind

stages:
  - prebuild
  - build
  - test
  - build_tags
  - deploy

###############################################################################
# Build Building Docker Image
###############################################################################
build_image:
  stage: prebuild
  image: docker:latest
  only:
    changes:
      - .gitlab/Dockerfile.build
      - .gitlab/.dockerignore
      - .gitlab/.gitlab-ci.yml
      - requirements.txt
      - docs/source/conf.py
  script:
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
    - docker build --tag $BUILD_IMAGE -f  .gitlab/Dockerfile.build .
    - docker push $BUILD_IMAGE

###############################################################################
# Build Latest Documentation
###############################################################################

build_latest_html:
  stage: build
  script:
    - cd docs
    - make html
  artifacts:
    paths:
      - docs/_build/html

build_latest_pdf:
  stage: build
  script:
    - cd docs
    - make latexpdf
  artifacts:
    paths:
      - docs/_build/latex/*.pdf

build_latest_epub:
  stage: build
  script:
    - cd docs
    - make epub
  artifacts:
    paths:
      - docs/_build/epub/*.epub

###############################################################################
# Test Black-Fennec
###############################################################################

run tests:
  stage: test
  before_script:
      - make init
    script:
      - pytest --cov-config=.coveragerc --cov=. tests/
      - coverage xml
    artifacts:
        reports:
            cobertura: coverage.xml
    coverage: /^TOTAL.+?(\d+\%)$/

###############################################################################
# Build Documentation for All Tags
###############################################################################

build_tags_html:
  stage: build_tags
  script:
    - cd docs
    - make MODE=html versions
  artifacts:
    paths:
      - docs/_versions/*/html

build_tags_pdf:
  stage: build_tags
  script:
    - cd docs
    - make MODE=latexpdf versions
  artifacts:
    paths:
      - docs/_versions/*/latex/*.pdf

build_tags_epub:
  stage: build_tags
  script:
    - cd docs
    - make MODE=epub versions
  artifacts:
    paths:
      - docs/_versions/*/epub/*.epub

###############################################################################
# Publish Gitlab Pages
###############################################################################

pages:
  stage: deploy
  only:
    - tags
  script:
    - cd docs
    - mv _build/html/ public
    - mv _build/epub/*.epub public/_static/
    - mv _build/latex/*.pdf public/_static/
    - |
    shopt -s dotglob
    for tag in $(git tag); do
    mkdir -p _versions/$tag/html/_static/
    mv _versions/$tag/epub/*.epub _versions/$tag/html/_static/
    mv _versions/$tag/latex/*.pdf _versions/$tag/html/_static/
    mv _versions/$tag/html/* _versions/$tag/
    rmdir _versions/$tag/html
    done
    - mv _versions public/
  artifacts:
    paths:
      - docs/public

###############################################################################
# Publish Python Package
###############################################################################

run publish-package:
  stage: deploy
  only:
    - tags
  script:
    - pip install twine
    - python setup.py sdist
    - TWINE_PASSWORD=${CI_JOB_TOKEN} TWINE_USERNAME=gitlab-ci-token python -m twine upload --repository-url https://gitlab.ost.ch/api/v4/projects/${CI_PROJECT_ID}/packages/pypi dist/*
